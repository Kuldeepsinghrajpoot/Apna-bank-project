/**
 * 
 */
/**
 * DISCLAIMER: The sample code or utility or tool described herein
 * is provided on an "as is" basis, without warranty of any kind.
 * UIDAI does not warrant or guarantee the individual success
 * developers may have in implementing the sample code on their
 * environment. 
 * 
 * UIDAI does not warrant, guarantee or make any representations
 * of any kind with respect to the sample code and does not make
 * any representations or warranties regarding the use, results
 * of use, accuracy, timeliness or completeness of any data or
 * information relating to the sample code. UIDAI disclaims all
 * warranties, express or implied, and in particular, disclaims
 * all warranties of merchantability, fitness for a particular
 * purpose, and warranties related to the code, or any service
 * or software related thereto. 
 * 
 * UIDAI is not responsible for and shall not be liable directly
 * or indirectly for any direct, indirect damages or costs of any
 * type arising out of use or any action taken by you or others
 * related to the sample code.
 * 
 * THIS IS NOT A SUPPORTED SOFTWARE.
 * 
 */
package in.gov.uidai.auth;

import in.gov.uidai.auth.sampleapp.PhotoDisplayPanel;
import in.gov.uidai.kyc.common.types._1.GenderType;
import in.gov.uidai.kyc.common.types._1.YesNoType;
import in.gov.uidai.kyc.uid_kyc_response._1.KycRes;
import in.gov.uidai.kyc.uid_kyc_response._1.PoaType;
import in.gov.uidai.kyc.uid_kyc_response._1.PoiType;
import in.gov.uidai.kyc.uid_kyc_response._1.UidDataType;

import java.awt.Image;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;

import com.sun.org.apache.xerces.internal.jaxp.datatype.XMLGregorianCalendarImpl;

/**
 * 
 */
public class exp {
	
	static JFrame aWindow = new JFrame("KYC response details");
	private KycRes kycRes;
	private Image image;
	private String uid = "123456798123";
	public exp(KycRes kycResponse) {
		this.kycRes = kycResponse;
		initialize();
		init();
	}
	
	public static void main(String[] args) {
		PoiType poi = new PoiType();
		poi.setDob("dob");
		poi.setEmail("a@b.com");
		poi.setGender(GenderType.M);
		poi.setName("Adi");
		poi.setPhone("0123456789");
		PoaType poa = new PoaType();
		poa.setCo("co");
		poa.setLoc("loc");
		poa.setHouse("ho");
		poa.setLm("lm");
		poa.setPc("123456");
		poa.setPo("po");
		poa.setDist("Dist");
		poa.setSubdist("subDist");
		poa.setVtc("vtc");
		poa.setState("state");
		UidDataType uidData = new UidDataType();
		uidData.setUid("123456789123");
		uidData.setPoi(poi);
		uidData.setPoa(poa);
		uidData
				.setPht("".getBytes());
		KycRes kycRes = new KycRes();
		kycRes.setCode("123456789");
		kycRes.setErr("NA");
		kycRes.setRet(YesNoType.Y);
		kycRes.setTs(new XMLGregorianCalendarImpl());
		kycRes.setTxn("UKC:1236546");
		kycRes.setUidData(uidData);

		new exp(kycRes);
	}

	private void initialize() {
		jLabelUID = new javax.swing.JLabel(uid);
		jTextFieldUID = new javax.swing.JTextField(uid);
		UidDataType uidData = kycRes.getUidData();
		PoiType poi = uidData.getPoi();
		jLabelName = new javax.swing.JLabel("Resident Name");
		jTextFieldName = new javax.swing.JTextField(poi.getName());
		jTextFieldName.setEditable(false);
		jLabelDOB = new javax.swing.JLabel("Date of Birth");
		jTextFieldDOB = new javax.swing.JTextField(poi.getDob());
		jTextFieldDOB.setEditable(false);
		jLabelGender = new javax.swing.JLabel("Gender");
		jTextFieldGender = new javax.swing.JTextField(poi.getGender().toString());
		jTextFieldGender.setEditable(false);
		jLabelMobile = new javax.swing.JLabel("Phone No");
		jTextFieldMobile = new javax.swing.JTextField(poi.getPhone());
		jTextFieldMobile.setEditable(false);
		jLabelEmail = new javax.swing.JLabel("Email Id");
		jTextFieldEmail = new javax.swing.JTextField(poi.getEmail());
		jTextFieldEmail.setEditable(false);
		PoaType poa = uidData.getPoa();
		jLabelCo = new javax.swing.JLabel("Care of");
		jTextFieldCo = new javax.swing.JTextField(poa.getCo());
		jTextFieldCo.setEditable(false);
		jLabelHouse = new javax.swing.JLabel("House no");
		jTextFieldHouse = new javax.swing.JTextField(poa.getHouse());
		jTextFieldHouse.setEditable(false);
		jLabelLm = new javax.swing.JLabel("Landmark");
		jTextFieldLm = new javax.swing.JTextField(poa.getLm());
		jTextFieldLm.setEditable(false);
		jLabelLc = new javax.swing.JLabel("Locality");
		jTextFieldLc = new javax.swing.JTextField(poa.getVtc());
		jTextFieldLc.setEditable(false);
		jLabelVtc = new javax.swing.JLabel("Vtc");
		jTextFieldVtc = new javax.swing.JTextField(poa.getVtc());
		jTextFieldVtc.setEditable(false);
		jLabelSubDist = new javax.swing.JLabel("Sub district");
		jTextFieldSubDist = new javax.swing.JTextField(poa.getSubdist());
		jTextFieldSubDist.setEditable(false);
		jLabelDist = new javax.swing.JLabel("District");
		jTextFieldDist = new javax.swing.JTextField(poa.getDist());
		jTextFieldDist.setEditable(false);
		jLabelState = new javax.swing.JLabel("State");
		jTextFieldState = new javax.swing.JTextField(poa.getState());
		jTextFieldState.setEditable(false);
		jLabelPc = new javax.swing.JLabel("Pincode");
		jTextFieldPc = new javax.swing.JTextField(poa.getPc());
		jTextFieldPc.setEditable(false);
		jLabelPo = new javax.swing.JLabel("PostOffice");
		jTextFieldPo = new javax.swing.JTextField(poa.getPo());
		jTextFieldPo.setEditable(false);
		jLabelStreet = new javax.swing.JLabel("Street");
		jTextFieldStreet = new javax.swing.JTextField(poa.getPo());
		jTextFieldStreet.setEditable(false);
		byte[] photo = uidData.getPht();
		readImage(photo);
		
		jPanelPhoto =  new PhotoDisplayPanel(image);
		jPanelPhoto.setBackground(new java.awt.Color(255, 255, 255));
		jPanelPhoto.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Photo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
		
		jPanelPOIDetails = new javax.swing.JPanel();
		jPanelPOIDetails.setBackground(new java.awt.Color(255, 255, 255));
	    jPanelPOIDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Identity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
	    
	    jPanelPoi =  new javax.swing.JPanel();
	    jPanelPoi.setBackground(new java.awt.Color(255, 255, 255));
	    jPanelPoi.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "POI ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
	    
	    jFrameAddressDetails = new javax.swing.JPanel();
	    jFrameAddressDetails.setBackground(new java.awt.Color(255, 255, 255));
	    jFrameAddressDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "POA ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
	    
        jFrameResponseDetails = new javax.swing.JPanel();
        jFrameResponseDetails.setBackground(new java.awt.Color(255, 255, 255));
        jFrameResponseDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Response Details ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        
        jFrameUID = new javax.swing.JPanel();
        jFrameUID.setBackground(new java.awt.Color(255, 255, 255));
        jFrameUID.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Aadhaar Number ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        
        jPanelUID = new javax.swing.JPanel();
        jPanelUID.setBackground(new java.awt.Color(255, 255, 255));
        jPanelUID.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        
	}
	
	private void init() {
		javax.swing.GroupLayout jPanelPOIDetailsLayout = new javax.swing.GroupLayout(jPanelPOIDetails);
        jPanelPOIDetails.setLayout(jPanelPOIDetailsLayout);
        jPanelPOIDetailsLayout.setHorizontalGroup(
            jPanelPOIDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            	.addGroup(jPanelPOIDetailsLayout.createSequentialGroup()
                .addGroup(jPanelPOIDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
	                .addComponent(jLabelName)
	                .addComponent(jLabelDOB)
	                .addComponent(jLabelGender)
	                .addComponent(jLabelMobile)
	                .addComponent(jLabelEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPOIDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            		.addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            		.addComponent(jTextFieldDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            		.addComponent(jTextFieldGender, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            		.addComponent(jTextFieldMobile, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            		.addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                 )
        );
        
        jPanelPOIDetailsLayout.setVerticalGroup(
            jPanelPOIDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPOIDetailsLayout.createSequentialGroup()
            		.addGroup(jPanelPOIDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelName))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelPOIDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                	.addComponent(jTextFieldDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDOB))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelPOIDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGender))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelPOIDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMobile))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelPOIDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEmail))         
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addContainerGap())
        );
        
        javax.swing.GroupLayout jPanelUidLayout = new javax.swing.GroupLayout(jFrameUID);
        jFrameUID.setLayout(jPanelUidLayout);
        jPanelUidLayout.setHorizontalGroup(
        		jPanelUidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUidLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelUID)
                .addContainerGap())
        );
        jPanelUidLayout.setVerticalGroup(
        		jPanelUidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUidLayout.createSequentialGroup()
                .addGroup(jPanelUidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelUID)
                ))
        );
        
        javax.swing.GroupLayout jPanelUIDLayout = new javax.swing.GroupLayout(jPanelUID);
        jPanelUID.setLayout(jPanelUIDLayout);
        jPanelUIDLayout.setHorizontalGroup(
        		jPanelUIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        		.addGroup(jPanelUIDLayout.createSequentialGroup()
        			.addGroup(jPanelUIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        					.addComponent(jFrameUID))
        					.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                	.addGroup(jPanelUIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanelPOIDetails))
                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addContainerGap())
        );
        
        jPanelUIDLayout.setVerticalGroup(
        		jPanelUIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUIDLayout.createSequentialGroup()
                .addGroup(jPanelUIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFrameUID))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelUIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelPOIDetails))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                )
        );
        
        javax.swing.GroupLayout jPanelPoiLayout = new javax.swing.GroupLayout(jPanelPoi);
        jPanelPoi.setLayout(jPanelPoiLayout);
        jPanelPoiLayout.setHorizontalGroup(
        		jPanelPoiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPoiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelPhoto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelUID)
                .addContainerGap())
        );
        jPanelPoiLayout.setVerticalGroup(
        		jPanelPoiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPoiLayout.createSequentialGroup()
                .addGroup(jPanelPoiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPanelPhoto)
                    .addComponent(jPanelUID)
                ))
        );
        
        javax.swing.GroupLayout jFrameAddressDetailsLayout = new javax.swing.GroupLayout(jFrameAddressDetails);
        jFrameAddressDetails.setLayout(jFrameAddressDetailsLayout);
        jFrameAddressDetailsLayout.setHorizontalGroup(
            jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameAddressDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDist)
                    .addComponent(jLabelCo)
                    .addComponent(jLabelLm)
                    .addComponent(jLabelLc)
                    .addComponent(jLabelVtc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldDist, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .addComponent(jTextFieldCo, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jTextFieldLm, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jTextFieldLc, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jTextFieldVtc, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameAddressDetailsLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelState, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameAddressDetailsLayout.createSequentialGroup()
                                .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelStreet)
                                    .addComponent(jLabelHouse)
                                    .addComponent(jLabelPo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldStreet, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameAddressDetailsLayout.createSequentialGroup()
                                .addComponent(jTextFieldState, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelPc)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPc, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldHouse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                            .addComponent(jTextFieldPo, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)))
                    .addGroup(jFrameAddressDetailsLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabelSubDist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldSubDist, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jFrameAddressDetailsLayout.setVerticalGroup(
            jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameAddressDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCo)
                    .addComponent(jTextFieldHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelHouse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLm)
                    .addComponent(jTextFieldLm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStreet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLc)
                    .addComponent(jTextFieldLc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPo)
                    .addComponent(jTextFieldPo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelVtc)
                    .addComponent(jTextFieldVtc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSubDist)
                    .addComponent(jTextFieldSubDist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameAddressDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPc)
                    .addComponent(jTextFieldState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelState)
                    .addComponent(jLabelDist)
                    .addComponent(jTextFieldDist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        
        javax.swing.GroupLayout jPanelResponseLayout = new javax.swing.GroupLayout(jFrameResponseDetails);
        jFrameResponseDetails.setLayout(jPanelResponseLayout);
        jPanelResponseLayout.setHorizontalGroup(
        		jPanelResponseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        		.addGroup(jPanelResponseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jFrameAddressDetails))
                .addGap(34, 34, 34)
                .addGroup(jPanelResponseLayout.createSequentialGroup()
                		.addGroup(jPanelResponseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                		.addComponent(jPanelPoi))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelResponseLayout.setVerticalGroup(
        		jPanelResponseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelResponseLayout.createSequentialGroup()
                .addGroup(jPanelResponseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFrameAddressDetails)
                    .addComponent(jPanelPoi)
                ))
        );
        
        javax.swing.GroupLayout jPanelAddressLayout = new javax.swing.GroupLayout(jFrameResponseDetails);
        jFrameResponseDetails.setLayout(jPanelAddressLayout);
        jPanelAddressLayout.setHorizontalGroup(
            jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAddressLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFrameAddressDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelAddressLayout.createSequentialGroup()
                        .addGroup(jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelPoi)
                     )
                .addContainerGap())))
        );
        
        jPanelAddressLayout.setVerticalGroup(
            jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAddressLayout.createSequentialGroup()
                .addComponent(jPanelPoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFrameAddressDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
		
		
		
		aWindow.setBounds(250, 250, 870, 500);
		aWindow.setResizable(false);
		aWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		aWindow.add(jFrameResponseDetails);
		aWindow.setVisible(true);
		
	}
	
	private void readImage(byte[] imageBytes) {
		byte[] faceByteIso = org.apache.commons.codec.binary.Base64.decodeBase64(imageBytes);
		try {
			this.image = ImageIO.read(new ByteArrayInputStream(faceByteIso));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private javax.swing.JPanel jFrameResponseDetails;
	private javax.swing.JPanel jPanelPOIDetails;
	private javax.swing.JLabel jLabelUID;
	private javax.swing.JTextField jTextFieldUID;
	
	private javax.swing.JLabel jLabelName;
	private javax.swing.JTextField jTextFieldName;
	private javax.swing.JLabel jLabelDOB;
	private javax.swing.JTextField jTextFieldDOB;
	private javax.swing.JLabel jLabelGender;
	private javax.swing.JTextField jTextFieldGender;
	private javax.swing.JLabel jLabelMobile;
	private javax.swing.JTextField jTextFieldMobile;
	private javax.swing.JLabel jLabelEmail;
	private javax.swing.JTextField jTextFieldEmail;
	
	private javax.swing.JLabel jLabelCo;
	private javax.swing.JTextField jTextFieldCo;
	private javax.swing.JLabel jLabelHouse;
	private javax.swing.JTextField jTextFieldHouse;
	private javax.swing.JLabel jLabelLm;
	private javax.swing.JTextField jTextFieldLm;
	private javax.swing.JLabel jLabelLc;
	private javax.swing.JTextField jTextFieldLc;
	private javax.swing.JLabel jLabelVtc;
	private javax.swing.JTextField jTextFieldVtc;
	private javax.swing.JLabel jLabelSubDist;
	private javax.swing.JTextField jTextFieldSubDist;
	private javax.swing.JLabel jLabelDist;
	private javax.swing.JTextField jTextFieldDist;
	private javax.swing.JLabel jLabelState;
	private javax.swing.JTextField jTextFieldState;
	private javax.swing.JLabel jLabelPc;
	private javax.swing.JTextField jTextFieldPc;
	private javax.swing.JLabel jLabelPo;
	private javax.swing.JTextField jTextFieldPo;
	private javax.swing.JTextField jTextFieldStreet;
	private javax.swing.JLabel jLabelStreet;
	
	private javax.swing.JPanel jPanelPoi;
	private javax.swing.JPanel jPanelPhoto;
	
	private javax.swing.JPanel jFrameAddressDetails;
	private javax.swing.JPanel jFrameUID;
	private javax.swing.JPanel jPanelUID;
	
}
